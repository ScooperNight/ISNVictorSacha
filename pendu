public class Fenetre extends JFrame implements ActionListener, MouseListener  {
    
     public static final String FICHIER = "C:\\Users\\Sacha\\Desktop\\dictionary.txt";
    
    private static final String LANCEMENT_FICHIER = "Jouer";
	private static final String ARRET_FICHIER = "Quitter";
	public static final String RELANCEMENT = "Voulez vous rejouer ?";
	// changes the state of the file
	// change le statut du fichier
	private int state = 0;
	
        // Generateur aleatoire pour tableau de mots
	public Random rGen = new Random();
	// Char array that houses the random phrases that was converted from the
	// word array
	// Tableau de caractères qui garde des phrases aléatoires qui ont été converties par le tableau de mots.
	
	private static char[] randPhrase;
	
        // tableau de mots qui garde les mots du fichier 
	
	private static String[] mots;
	// Char array that houses the user guesses
        // Lettre que l'utilisateur a entré
	private static char[] LettreUtiliser;
	// counts the number of hangman body parts
        // compte le nombre de parties du corps 
	public static int numCorps = 0;
	
        // détient les lettres que l'utilisateur devine
	private static String numGuesses = "";
	// holds the random word that the word array generates to prevent multiple
	// calls
        // détient le mot aléatoire que le tableau génère pour éviter plusieurs demandes
	public static String phrase;
	// all my panels - mainpanel holds left/right/bottom(keyboard)
	public static JPanel PanelPrincipal, PanelGauche, PanelDroite, PanelBas, PanelHaut, BoxBouton;
   
   
  
    
     public Fenetre(){
        
         
         
    this.setTitle("Le pandax");   
    this.setSize(800, 500);
    this.setLocationRelativeTo(null);               
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    this.setContentPane(new Panneau());
    
    // Panel principal qui garde les 3 panels (gauche / droite / en bas(clavier))
		PanelPrincipal = new JPanel();
		PanelPrincipal.setLayout(new GridLayout(3, 0));
		PanelPrincipal.setBackground(Color.WHITE);

		PanelDroite = new JPanel();
		PanelGauche = new JPanel();
		PanelGauche.setBackground(Color.WHITE);
		PanelDroite.setBackground(Color.WHITE);
		
		// Ajoute les panels de gauche et de droite
		PanelPrincipal.add(PanelGauche);
		PanelPrincipal.add(PanelDroite);
		PanelBas = new JPanel();
		PanelBas.setLayout(new GridLayout(4, 4));
		PanelBas.setBackground(Color.GRAY);
		
		// Ajoute le panel du bas qui contient Jbuttons
		PanelPrincipal.add(PanelBas, BorderLayout.SOUTH);

		PanelHaut = new JPanel();
		PanelHaut.setBackground(Color.GREEN);
	
		// Ajoute le dernier panel qui contient les boutons "rejouer" et "quitter"
		add(PanelPrincipal);
		add(PanelHaut, BorderLayout.AFTER_LAST_LINE);

		// set visibility to false until game is over
		// Cache le mot tant que la partie n'est pas finie
		PanelHaut.setVisible(false);
                createButtons();
                addMouseListener(this);
                createMenuBar();
                replayButtons(PanelHaut);
                mots = textFile();
    
     }
     
     public void replayButtons(JPanel PanelHaut) {
		JButton playAgain = new JButton(RELANCEMENT);
		playAgain.setSize(80, 80);
		playAgain.setActionCommand(RELANCEMENT);
		playAgain.addActionListener(this);
		JButton exit = new JButton(ARRET_FICHIER);
		exit.setActionCommand(ARRET_FICHIER);
		exit.addActionListener(this);
		exit.setSize(80, 80);
		PanelHaut.add(playAgain);
		PanelHaut.add(exit);
	}
     
     public void createMenuBar() {
		JMenuBar menuBar = new JMenuBar();
		setJMenuBar(menuBar);

		// create file menu
		// Créer le fichier du menu
		JMenu fileMenu = new JMenu("File");
		menuBar.add(fileMenu);

		// add menu items
		// Ajoute les objets du menu
		createMenuItem(fileMenu, LANCEMENT_FICHIER);
		createMenuItem(fileMenu, ARRET_FICHIER);

	}
	//method creates menu items with action listeners
	// Méthode qui crée les objets du menu avec les "actionlisteners"
	public void createMenuItem(JMenu menu, String itemName) {
		JMenuItem menuItem = new JMenuItem(itemName);
		menuItem.addActionListener(this);
		menu.add(menuItem);
	}
     
     
public void createButtons() {
     
    
       //On crée un conteneur avec gestion horizontale
    Box b1 =Box.createHorizontalBox();
    
    JButton[] buttons = new JButton[7];
    String[] letters = { "A", "B", "C", "D", "E", "F", "G",};
     for (int i = 0; i < buttons.length; i++) {
    buttons[i] = new JButton(letters[i]);
    buttons[i].setActionCommand(letters[i]);
    buttons[i].addActionListener(this);
    b1.add(buttons[i]);
    
    //b1.add(new JButton("b"));
    //b1.add(new JButton("c"));
    //b1.add(new JButton("d"));
    //b1.add(new JButton("e"));
    //b1.add(new JButton("f"));
    //b1.add(new JButton("g"));
     }
    //Idem
    Box b2 = Box.createHorizontalBox();
    
    JButton[] buttons2 = new JButton[7];
    String[] letters2 = { "H", "I", "J", "K", "L", "M", "N",};
     for (int j = 0; j < buttons2.length; j++) {
    buttons2[j] = new JButton(letters2[j]);
    buttons2[j].setActionCommand(letters2[j]);
    buttons2[j].addActionListener(this);
    b2.add(buttons2[j]);
     }
    //b2.add(new JButton("h"));
    //b2.add(new JButton("i"));
    //b2.add(new JButton("j"));
    //b2.add(new JButton("k"));
    //b2.add(new JButton("l"));
    //b2.add(new JButton("m"));
    //b2.add(new JButton("n"));
    //Idem
    Box b3 = Box.createHorizontalBox();
    JButton[] buttons3 = new JButton[7];
    String[] letters3 = { "O", "P", "Q", "R", "S", "T", "U",};
     for (int l = 0; l < buttons3.length; l++) {
    buttons3[l] = new JButton(letters3[l]);
    buttons3[l].setActionCommand(letters3[l]);
    buttons3[l].addActionListener(this);
    b3.add(buttons3[l]);
    //b3.add(new JButton("o"));
    //b3.add(new JButton("p"));
    //b3.add(new JButton("q"));
    //b3.add(new JButton("r"));
    //b3.add(new JButton("s"));
    //b3.add(new JButton("t"));
    //b3.add(new JButton("u"));
     }
    Box b5 = Box.createHorizontalBox();
    JButton[] buttons4 = new JButton[5];
    String[] letters4 = { "V", "W", "X", "Y", "Z"};
    for (int t = 0; t < buttons4.length; t++) {
    buttons4[t] = new JButton(letters4[t]);
    buttons4[t].setActionCommand(letters4[t]);
    buttons4[t].addActionListener(this);
    
    b5.add(buttons4[t]);
    //b5.add(new JButton("v"));
    //b5.add(new JButton("w"));
    //b5.add(new JButton("x"));
    //b5.add(new JButton("y"));
    //b5.add(new JButton("z"));
    }
    //On crée un conteneur avec gestion verticale
    //Box b4 = Box.createVerticalBox();
     //JPanel b4 = new JPanel();
     BoxBouton = new JPanel();
     
    //On positionne maintenant ces trois lignes en colonne
    BoxBouton.setLayout(new BoxLayout(BoxBouton, BoxLayout.PAGE_AXIS));
    BoxBouton.add(b1);
    BoxBouton.add(b2);
    BoxBouton.add(b3);
    BoxBouton.add(b5);
    //BoxBouton.setBounds(50,0, 50,0);
    
    
    

    this.getContentPane().add(BoxBouton);
    
    this.setVisible(true);
    //Définition de sa couleur de fond
           
  
    
    
     }

public void paint(Graphics g) {
		super.paint(g);

		
		// met en place la police de caractère
		Font font = new Font("Serif", Font.BOLD | Font.ITALIC, 24);
		g.setFont(font);
		g.setColor(Color.RED);

		
		// Si l'utilisateur a cliqué sur "jouer", lance le jeu
		if (state == 1) {


			gameMessages(g);
			String result = "";
			for (int i = 0; i < LettreUtiliser.length; i++) {

				result += LettreUtiliser[i] + " ";


			}
			g.drawString(result, 300, 175);
			g.drawString("GUESSES", 300, 300);
			g.drawString(numGuesses, 300, 350);
			System.out.println(randPhrase);
			// if user misses a letter - display body parts


		

			}
		}

private void gameMessages(Graphics g) {

		if (!winner()) {
			// draw welcome message
			// dessine un message de bienvenue
			g.drawString("Jouer au pendu !", 25, 80);
			//draw winner message and enable belowpanel
// dessine le message de bienvenue et active belowpanel
		} else if (winner() && numCorps < 6) {
			System.out.println("i hit here");
			// j'ai tapé ici ???
			g.drawString("Tu as gagné", 25, 80);
			PanelBas.setVisible(false);
			PanelHaut.setVisible(true);

			//draw lost message and enable belowpanel
			// Dessine le message de défaite et active belowpanel
		} else if (numCorps == 6) {

			g.drawString("Tu as perdu !", 25, 80);
			PanelBas.setVisible(false);
			PanelHaut.setVisible(true);

		}

	}
// generate a random word and return via char array
// génère un mot au hasard et recommence via un tableau de caractère
	public String getword() {
		mots = textFile();

		int n = mots.length;
		int r = rGen.nextInt(n);
		String word = mots[r];

		return word;
	}

	// method determines whether guesses array match the randphrase array 
	// méthode qui détermine si les suppositions du tableau correspondent au tableau randphrase 
	public boolean winner() {
		if (Arrays.equals(LettreUtiliser, randPhrase)) {
			return true;
		} else {
			return false;
		}

	}
        public String[] textFile() {
		// create a bufferedReader
		// Créer un bufferReader
		BufferedReader reader = null;
		// create a list array and store the values from the text file
		// Créer un tableau et récupère les mots du fichier texte
		List<String> wordList = new ArrayList<String>();
		try {
			reader = new BufferedReader(new FileReader(FICHIER));
			String s = null;

			while ((s = reader.readLine()) != null) {

				wordList.add(s);

			}

		} catch (IOException e) {

			System.out.println(e.getMessage());
			System.exit(-1);
		} finally {
			try {
				// close the file
				// ferme le fichier
				reader.close();
			} catch (IOException e) {
				System.out.println(e.getMessage());
				System.exit(-1);
			}
		}
		// convert from arraylist to array and return
		return wordList.toArray(new String[wordList.size()]);

	}

	public void actionPerformed(ActionEvent e) {

		String command = e.getActionCommand();

	 if (command.equals(LANCEMENT_FICHIER)) {
			// once the user has pressed play, change state and call to play
			// method
			// Une fois que l'utilisateur a cliqué sur "jouer", change le statut et envoie une demande pour lancer method
			state = 1;
			play();

			repaint();

		}

	 else if (command.length() == 1 && state == 1) {
			// pass action event to letters if the user has pressed play and the
			// event is generated
			// by the Jbutton array (length of the string is one)
			// Passe l'action de l'évènement aux lettres si l'utilisateur a cliqué sur "jouer" 
			// et que l'évènement est généré par le tableau Jbutton
			letters(command);
		}
		//reset status and replay game
		// réinitialise le statut et relance le jeu
		else if (command.equals(RELANCEMENT)) {

			numCorps = 0;
			numGuesses = "";
			PanelBas.setVisible(true);
			state = 1;
			play();
			repaint();		

		} else if (command.equals(ARRET_FICHIER)) {
			state = 2;
			System.exit(-1);
		}

		// repaint();
	}

	// method receives actionevent from JButtons and compares it to randphrase
	// array
	// method recoit actionevent de Jbuttons et le compare eu tableau randphrase
	public void letters(String command) {

		System.out.println(command);

		if (phrase.contains(command.toLowerCase())) {
			for (int i = 0; i < randPhrase.length; i++) {
				if (command.toLowerCase().charAt(0) == randPhrase[i]) {
					LettreUtiliser[i] = command.toLowerCase().charAt(0);

				}

			}
			// if letter does not match - bodycounter increases
			// Si la lettre ne correspond pas, le nombre de parties du corps affichées augmente
		} else if (!phrase.contains(command.toLowerCase())) {
			JOptionPane.showMessageDialog(null, "Désolé " + command
					+ " ne fait pas partie du mot");
			numCorps++;
		}

		// concatenation user guesses
		// série de lettres que l'utilisateur suppose 
		numGuesses += command;
		if (numCorps < 6 && !winner()) {
			numGuesses += ",";
		}
		repaint();
	}

	// method generates the '_' on the guesses array so it's display to the user
	// method qui génère '_' du tableau des suppositions et l'affiche à l'utilisateur
	private void play() {

		// store random word
		// Garde un mot au hasard
		phrase = getword();
		// convert random word to char array
		// Converti le mot prit au hasard dans le tableau de caractères
		randPhrase = phrase.toCharArray();
		//create an array to hold and display user input
		// Crée un tableau qui garde et affiche les lettres que propose le joueur
		LettreUtiliser = new char[randPhrase.length];
		//populate the array with dashes first
		// remplit le tableau avec des tirets en premier (aucune lettre encore trouvée)
		
		for (int i = 0; i < LettreUtiliser.length; i++) {
			LettreUtiliser[i] = '_';
			}

	}

   public void mouseClicked(MouseEvent e) {
	}

	public void mouseEntered(MouseEvent e) {
	}

	public void mouseExited(MouseEvent e) {
	}

	public void mousePressed(MouseEvent e) {
	}

	public void mouseReleased(MouseEvent e) {
	}
      
        
        
    public static void main(String[] args){
    Fenetre fen = new Fenetre();
    
    
  }}
   
